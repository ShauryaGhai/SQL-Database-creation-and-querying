{
    "metadata": {
        "kernelspec": {
            "name": "SQL",
            "display_name": "SQL",
            "language": "sql"
        },
        "language_info": {
            "name": "sql",
            "version": ""
        }
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "use MotorsCertificatiion;\n",
                "\n",
                "\n",
                "--Q3- Find out the highest and the lowest amount.--\n",
                "\n",
                "\n",
                "select MAX(amount) as highest_amount, MIN(amount) as lowest_amount \n",
                "from payments;\n",
                "\n",
                "select * from payments;\n",
                "\n",
                "--Q4- Give the unique count of customerName from customers--\n",
                "\n",
                "select count(distinct customerName) as unique_customer_count\n",
                "from customers;\n",
                "\n",
                "select * from customers\n",
                "---Q5- Create a view from customers and payments named cust_payment and select customerName, amount, contactLastName, contactFirstName who have paid.--\n",
                "\n",
                "create view cust_payment as\n",
                "select customers.customerName, payments.amount, customers.ContackLastName, customers.ContackFirstName\n",
                "from customers\n",
                "join payments\n",
                "on customers.customerNumber = payments.CustomerNumber\n",
                "\n",
                "--select data from tyhe view--\n",
                "\n",
                "select * from cust_payment\n",
                "\n",
                "--Truncate and Drop the view--\n",
                "\n",
                "drop view if exists cust_payment;\n",
                "\n",
                "--Q6- Create a stored procedure on products which displays productLine for Classic Cars.--\n",
                "\n",
                "Create Procedure getclassiccarproductline \n",
                "as\n",
                "begin\n",
                "\tselect * from products where productLine = 'Classic cars'\t\n",
                "end;\n",
                "\n",
                "--to execute the stored procedure--\n",
                "\n",
                "exec getclassiccarproductline\n",
                "--Q7- Create a function to get the creditLimit of customers less than 96800--\n",
                "\n",
                "Create function get_cust_lowcreditlimit()\n",
                "returns table\n",
                "as\n",
                "return\n",
                "(\n",
                "\tselect customerNumber, creditlimit\n",
                "\tfrom customers\n",
                "\twhere CreditLimit < 96800\n",
                ");\n",
                "\n",
                "--To execute the function--\n",
                "\n",
                "select * from get_cust_lowcreditlimit();\n",
                "\n",
                "\n",
                "--Q8- Create Trigger to store transaction record for employee table which displays employeeNumber, lastName, FirstName and office code upon insertion\n",
                "\n",
                "--To solve this question we have to create a table to store transaction records.\n",
                "\n",
                "Create Table employee_Transaction_log(TransactionID int identity(1,1) primary key, \n",
                "\tEmployeeNumber int,\n",
                "\tLastName varchar(50),\n",
                "\tFirstName varchar(50),\n",
                "\tOfficeCode Varchar(50),\n",
                "\tTransaction_time datetime default getdate()\n",
                ");\n",
                "-- after creating a table we have to create a trigger--\n",
                "\n",
                "Create Trigger Employee_insert_Trigger\n",
                "on employee\n",
                "after insert\n",
                "as\n",
                "begin\n",
                "\tinsert into employee_Transaction_log(employeeNumber, LastName, FirstName, OfficeCode)\n",
                "\tselect employeeNumber, Lastname, FirstName, OfficeCode\n",
                "\tfrom inserted\n",
                "end;\n",
                "\n",
                "\n",
                "--Q9- Create a Trigger to display customer number if the amount is greater than 10,000--\t\n",
                "Create Trigger display_customer_Trigger\n",
                "on payments\n",
                "after insert\n",
                "as\n",
                "begin\n",
                "\tdeclare @customerNumber int;\n",
                "\t\n",
                "\tselect @customerNumber = CustomerNumber\n",
                "\tfrom inserted\n",
                "\twhere amount > 10000;\n",
                "\n",
                "\tif @customerNumber is not null\n",
                "\tbegin\n",
                "\t\tprint 'customerNumber:' + cast(@customerNumber as varchar(20));\n",
                "\tend\n",
                "end;"
            ],
            "metadata": {
                "azdata_cell_guid": "4cbf84e8-216f-46e0-a98e-87a6836aea88",
                "language": "sql"
            },
            "outputs": [],
            "execution_count": null
        }
    ]
}